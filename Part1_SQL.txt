
1. Print the company_name field. Find the number of taxi trips for each taxi company from November 15 to 16, 2017, name the resulting field trips_amount and print it as well. Sort the results by the trips_amount field in descending order.
SELECT 
    cabs.company_name AS company_name,
    COUNT(trips.trip_id) AS trips_amount
FROM
    trips
    JOIN cabs 
    ON trips.cab_id = cabs.cab_id
WHERE
    CAST(trips.start_ts AS date) BETWEEN '2017-11-15'
    AND '2017-11-16'
GROUP BY
    cabs.company_name
ORDER BY 
    trips_amount DESC;

    
2. Find the number of trips for each taxi company whose name contains the words "Yellow" or "Blue" from November 1 to November 7, 2017. Name the resulting variable trips_amount. Group the results by the company_name field.
SELECT 
    cabs.company_name AS company_name,
    COUNT(trips.trip_id) AS trips_amount
FROM
    trips
    JOIN cabs 
    ON trips.cab_id = cabs.cab_id
WHERE
    CAST(trips.start_ts AS date) BETWEEN '2017-11-01' AND '2017-11-07'
    AND (cabs.company_name LIKE '%Yellow%' OR cabs.company_name LIKE '%Blue%')
GROUP BY
    cabs.company_name
ORDER BY 
    trips_amount DESC;

    
3. From November 1 to November 7, 2017, the most popular taxi companies were Flash Cab and Taxi Affiliation Services. Find the number of trips for these two companies and name the resulting variable trips_amount. Collect the trips for all other companies in the "Other" group. Group the data by taxi company names. Name the field with the taxi company names company. Sort the result in descending order by trips_amount.
SELECT 
    CASE 
        WHEN cabs.company_name = 'Flash Cab' THEN 'Flash Cab'
        WHEN cabs.company_name = 'Taxi Affiliation Services' THEN 'Taxi Affiliation Services'
        ELSE 'Other' 
    END AS company,
    COUNT(trips.trip_id) AS trips_amount
FROM
    trips
    JOIN cabs 
    ON trips.cab_id = cabs.cab_id
WHERE
    CAST(trips.start_ts AS date) BETWEEN '2017-11-01' AND '2017-11-07'
GROUP BY
        CASE 
        WHEN cabs.company_name = 'Flash Cab' THEN 'Flash Cab'
        WHEN cabs.company_name = 'Taxi Affiliation Services' THEN 'Taxi Affiliation Services'
        ELSE 'Other'
    END
ORDER BY 
    trips_amount DESC;

4. Retrieve the O'Hare and Loop neighborhood identifiers from the neighborhoods table.
SELECT
    neighborhoods.neighborhood_id AS  neighborhood_id,
     neighborhoods.name AS  name
FROM
    neighborhoods
WHERE
     neighborhoods.name = 'O''Hare' OR neighborhoods.name = 'Loop';

5.For each hour, retrieve weather condition records from the weather_records table. Using the CASE operator, divide all hours into two groups: Bad if the description field contains the words rain or storm, and Good if otherwise. Name the resulting field weather_conditions. The final table should include two fields: date and time (ts) and weather_conditions.
SELECT
    ts AS data_hora,
    CASE 
        WHEN description LIKE '%rain%' OR description LIKE '%storm%' THEN 'Bad'
        ELSE 'Good'
    END AS weather_conditions
FROM 
    weather_records;

6.
Retrieve from the trips table all trips that started at the Loop (pickup_location_id: 50) on a Saturday and ended at O'Hare (dropoff_location_id: 63). Get the weather conditions for each trip. Use the method you applied in the previous task. Also, retrieve the duration of each trip. Ignore trips for which weather data is not available.
The columns in the table should be in the following order:
• start_ts
• weather_conditions
• duration_seconds
Order by trip_id.

SELECT
    trips.start_ts AS start_ts,
    CASE 
        WHEN weather_records.description LIKE '%rain%' OR weather_records.description LIKE '%storm%' THEN 'Bad'
        ELSE 'Good'
    END AS weather_conditions,
    trips.duration_seconds AS duration_seconds
FROM 
    trips
    INNER JOIN weather_records 
    ON trips.start_ts = weather_records.ts
WHERE 
    trips.pickup_location_id = '50' 
    AND trips.dropoff_location_id = '63'
    AND EXTRACT(DOW FROM trips.start_ts) = 6
ORDER BY 
    trips.trip_id;